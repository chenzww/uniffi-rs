
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

buildscript {
    ext.kotlin_version = '1.3.71'
    ext.jna_version = '5.6.0'
    ext.android_gradle_plugin_version = '3.6.0'
    ext.android_components_version = '56.0.0'

    ext.build = [
        ndkVersion: "21.3.6528147",
        compileSdkVersion: 29,
        targetSdkVersion: 28,
        minSdkVersion: 21,
        jvmTargetCompatibility: "1.8",
    ]

    repositories {
        google()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$android_gradle_plugin_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // Publish.
        classpath 'digital.wup:android-maven-publish:3.6.2'

        classpath 'gradle.plugin.org.mozilla.rust-android-gradle:plugin:0.8.3'

        // Yes, this is unusual.  We want to access some host-specific
        // computation at build time.
        classpath "net.java.dev.jna:jna:$jna_version"
    }
}

android {
    ndkVersion ext.build.ndkVersion
    compileSdkVersion ext.build.compileSdkVersion

    defaultConfig {
        minSdkVersion ext.build['minSdkVersion']
        targetSdkVersion ext.build['targetSdkVersion']
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    sourceSets {
        test.resources.srcDirs += "$buildDir/rustJniLibs/desktop"
    }

    // This is required to support new AndroidX support libraries.
    compileOptions {
        sourceCompatibility rootProject.ext.build.jvmTargetCompatibility
        targetCompatibility rootProject.ext.build.jvmTargetCompatibility
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = rootProject.ext.build.jvmTargetCompatibility
        }
    }
}

allprojects {
    apply plugin: 'digital.wup.android-maven-publish'

    repositories {
        google()
        jcenter()
        maven {
            url "https://maven.mozilla.org/maven2"
        }
    }

    // Enable Kotlin warnings as errors for all modules.
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions.allWarningsAsErrors = true
    }
}

// Avoid Gradle namespace collision.  This is here, rather than in `buildscript
// { ... }`, to avoid issues with importing.
import com.sun.jna.Platform as DefaultPlatform

// The Cargo targets to invoke.  The mapping from short name to target
// triple is defined by the `rust-android-gradle` plugin.
ext.rustTargets = [
    'arm',
    'arm64',
    'x86_64',
    'x86',
]

// Generate libs for our current platform so we can run unit tests.
switch (DefaultPlatform.RESOURCE_PREFIX) {
    case 'darwin':
        ext.rustTargets += 'darwin'
        break
    case 'linux-x86-64':
        ext.rustTargets += 'linux-x86-64'
        break
    case 'win32-x86-64':
        ext.rustTargets += 'win32-x86-64-gnu'
        break
}

configurations {
    // There's an interaction between Gradle's resolution of dependencies with different types
    // (@jar, @aar) for `implementation` and `testImplementation` and with Android Studio's built-in
    // JUnit test runner.  The runtime classpath in the built-in JUnit test runner gets the
    // dependency from the `implementation`, which is type @aar, and therefore the JNA dependency
    // doesn't provide the JNI dispatch libraries in the correct Java resource directories.  I think
    // what's happening is that @aar type in `implementation` resolves to the @jar type in
    // `testImplementation`, and that it wins the dependency resolution battle.
    //
    // A workaround is to add a new configuration which depends on the @jar type and to reference
    // the underlying JAR file directly in `testImplementation`.  This JAR file doesn't resolve to
    // the @aar type in `implementation`.  This works when invoked via `gradle`, but also sets the
    // correct runtime classpath when invoked with Android Studio's built-in JUnit test runner.
    // Success!
    jnaForTest
}

dependencies {
    jnaForTest "net.java.dev.jna:jna:$jna_version@jar"
    implementation "net.java.dev.jna:jna:$jna_version@aar"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

afterEvaluate {
    // The `cargoBuild` task isn't available until after evaluation.
    android.libraryVariants.all { variant ->
        def productFlavor = ""
        variant.productFlavors.each {
            productFlavor += "${it.name.capitalize()}"
        }
        def buildType = "${variant.buildType.name.capitalize()}"
        tasks["merge${productFlavor}${buildType}JniLibFolders"].dependsOn(tasks["cargoBuild"])
    }
}

publishing {
    publications {
        aar(MavenPublication) {
            project.afterEvaluate {
                from components.findByName("androidRelease")
            }

            pom {
                groupId = "uniffi.whatever"
                artifactId = "example"
                description = "this should come from cargo.toml"
                version = "0.0.1"
                packaging = "aar"

                license {
                    name = "from-cargo-toml"
                    url = "from-cargo-toml"
                }

                developers {
                    developer {
                        name = 'Mozilla Application Services'
                        email = 'get-me@from.cargo.toml'
                    }
                }

                scm {
                    connection = "get"
                    developerConnection = "me"
                    url = "from-toml"
                }
            }

            // TODO: can we do something clever about bundling dependency licenses?
        }
    }
}